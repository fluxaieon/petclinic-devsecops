name: Spring PetClinic CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  JFROG_PLATFORM_URL: ${{ secrets.JFROG_PLATFORM_URL }}
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
  JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

  MAVEN_VIRTUAL_REPO: maven-virtual
  DOCKER_LOCAL_REPO: docker-hub-local
  DOCKER_VIRTUAL_REPO: docker-hub-virtual
  IMAGE_NAME: spring-petclinic
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4 # CORRECTED
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Install JFrog CLI & Configure Server
      run: |
        curl -fL https://install-cli.jfrog.io | sh
        jf --version

        echo "DOCKER_REGISTRY_HOST=$(echo ${{ env.JFROG_PLATFORM_URL }} | sed 's|^https://||')" >> $GITHUB_ENV

        jf c add main-jfrog-server --url=${{ env.JFROG_PLATFORM_URL }} --user=${{ env.JFROG_USERNAME }} --access-token=${{ env.JFROG_ACCESS_TOKEN }} --overwrite --interactive=false

    - name: Configure Maven for JFrog Artifactory
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml <<EOF
        <settings>
            <servers>
                <server>
                    <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                    <username>${{ env.JFROG_USERNAME }}</username>
                    <password>${{ env.JFROG_ACCESS_TOKEN }}</password>
                </server>
            </servers>
            <profiles>
                <profile>
                    <id>artifactory</id>
                    <repositories>
                        <repository>
                            <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                            <name>${{ env.MAVEN_VIRTUAL_REPO }}</name>
                            <url>${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.MAVEN_VIRTUAL_REPO }}</url>
                            <snapshots>
                                <enabled>true</enabled>
                            </snapshots>
                        </repository>
                    </repositories>
                    <pluginRepositories>
                        <pluginRepository>
                            <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                            <name>${{ env.MAVEN_VIRTUAL_REPO }}</name>
                            <url>${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.MAVEN_VIRTUAL_REPO }}</url>
                            <snapshots>
                                <enabled>true</enabled>
                            </snapshots>
                        </pluginRepository>
                    </pluginRepositories>
                </profile>
            </profiles>
            <activeProfiles>
                <activeProfile>artifactory</activeProfile>
            </activeProfiles>
        </settings>
        EOF

    - name: Compile the code
      run: mvn clean compile

    - name: Run the tests
      run: mvn test

    - name: Package the project (JAR)
      run: mvn package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY_HOST }}/${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

    - name: Publish Docker image to JFrog Artifactory
      run: |
        jf rt docker-push ${{ env.DOCKER_REGISTRY_HOST }}/${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_LOCAL_REPO }}

    - name: Trigger JFrog XRay Scan (using scanArtifact API)
      run: |
        # Install 'jq' if not present
        sudo apt-get update && sudo apt-get install -y jq || true

        # Construct the componentID as "docker://repo_key/image_name:image_tag"
        # This is the format expected by the scanArtifact API.
        COMPONENT_ID="docker://${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

        # Construct the JSON payload for the /xray/api/v1/scanArtifact API
        # Pass COMPONENT_ID as a shell variable to jq
        SCAN_ARTIFACT_PAYLOAD=$(jq -n \
            --arg comp_id "$COMPONENT_ID" \
            '{componentID: $comp_id}' \
        )

        # Execute the POST request to trigger the scan using the correct API
        jf rt curl -XPOST "/xray/api/v1/scanArtifact" \
           -H "Content-Type: application/json" \
           -d "$SCAN_ARTIFACT_PAYLOAD"
        
        # Corrected echo to use shell variable directly
        echo "XRay scan triggered for componentID: $COMPONENT_ID"
        sleep 120 # Delay for XRay processing

    - name: Get XRay Scan Data (using Export API)
      run: |
        # Ensure 'jq' is installed for URL encoding (already handled above)
        
        COMP_NAME_ENCODED=$(printf %s "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" | jq -sRr @uri)
        ARTIFACT_PATH_ENCODED=$(printf %s "${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}/manifest.json" | jq -sRr @uri)

        FULL_XRAY_API_PATH="/ui/api/v1/xray/ui/component/exportComponentDetails?"
        FULL_XRAY_API_PATH+="prefix=docker"
        FULL_XRAY_API_PATH+="&comp_name=${COMP_NAME_ENCODED}"
        FULL_XRAY_API_PATH+="&format=json"
        FULL_XRAY_API_PATH+="&path=${ARTIFACT_PATH_ENCODED}"
        FULL_XRAY_API_PATH+="&license=true&operational_risk=true&vulnerabilities=true&violations=true&secrets=true&services=true&applications=true&licenseResolution=true&exclude_unknown=false&include_ignored_violations=true"

        jf rt curl -XGET "${FULL_XRAY_API_PATH}" -o xray_scan_data.json
      continue-on-error: true

    - name: Upload XRay Scan Data as artifact
      if: success() && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: xray-scan-data
        path: xray_scan_data.json
