name: Spring PetClinic CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  JFROG_PLATFORM_URL: ${{ secrets.JFROG_PLATFORM_URL }}
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
  JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
  
  # Your JFrog Repository Names (as configured in Phase 1)
  MAVEN_VIRTUAL_REPO: maven-virtual
  DOCKER_LOCAL_REPO: docker-hub-local
  DOCKER_VIRTUAL_REPO: docker-virtual # Used by Dockerfile for pulling base images

  IMAGE_NAME: spring-petclinic
  IMAGE_TAG: ${{ github.sha }} # Use commit SHA as image tag

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Install JFrog CLI
      run: |
        curl -fL https://install-cli.jfrog.io | sh
        jf --version # Verify jf is in PATH and working

    - name: Configure JFrog CLI for Docker
      run: |
        # This step logs Docker into your Artifactory Docker registry for pushing images.
        jf rt docker-config ${{ env.DOCKER_LOCAL_REPO }} \
          --url=${{ env.JFROG_PLATFORM_URL }} \
          --user=${{ env.JFROG_USERNAME }} \
          --access-token=${{ env.JFROG_ACCESS_TOKEN }} \
          --server-id=${{ env.DOCKER_LOCAL_REPO }} # Use repo name as server ID for clarity

    - name: Configure Maven for JFrog Artifactory
      run: |
        # This step directly configures Maven's settings.xml for dependency resolution
        # and authentication with your JFrog Artifactory virtual Maven repository.
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml <<EOF
        <settings>
            <servers>
                <server>
                    <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                    <username>${{ env.JFROG_USERNAME }}</username>
                    <password>${{ env.JFROG_ACCESS_TOKEN }}</password>
                </server>
            </servers>
            <profiles>
                <profile>
                    <id>artifactory</id>
                    <repositories>
                        <repository>
                            <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                            <name>${{ env.MAVEN_VIRTUAL_REPO }}</name>
                            <url>${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.MAVEN_VIRTUAL_REPO }}</url>
                            <snapshots>
                                <enabled>true</enabled>
                            </snapshots>
                        </repository>
                    </repositories>
                    <pluginRepositories>
                        <pluginRepository>
                            <id>${{ env.MAVEN_VIRTUAL_REPO }}</id>
                            <name>${{ env.MAVEN_VIRTUAL_REPO }}</name>
                            <url>${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.MAVEN_VIRTUAL_REPO }}</url>
                            <snapshots>
                                <enabled>true</enabled>
                            </snapshots>
                        </pluginRepository>
                    </pluginRepositories>
                </profile>
            </profiles>
            <activeProfiles>
                <activeProfile>artifactory</activeProfile>
            </activeProfiles>
        </settings>
        EOF

    - name: Compile the code
      run: mvn clean compile

    - name: Run the tests
      run: mvn test

    - name: Package the project (JAR)
      run: mvn package -DskipTests

    - name: Build Docker image
      run: |
        # Build image, pulling base image from JFrog virtual Docker repo as configured in Dockerfile
        docker build -t ${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

    - name: Publish Docker image to JFrog Artifactory
      run: |
        # Use jf for docker-push command
        jf rt docker-push ${{ env.JFROG_PLATFORM_URL }}/artifactory/${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_LOCAL_REPO }}

    - name: Trigger JFrog XRay Scan
      # XRay scan will always be triggered now
      run: |
        jf rt curl -XPOST "/xray/api/v1/scan/artifact" -H "Content-Type: application/json" -d '{
          "repo_path": "${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}",
          "watches": ["${{ secrets.YOUR_XRAY_WATCH_NAME }}"] # Ensure this secret is still configured if you use watches
        }'
        echo "XRay scan triggered. Manually check XRay UI for results or implement polling for automation."

    - name: Get XRay Scan Data
      # XRay scan data will always be attempted to be fetched now (for push events)
      run: |
        # This is a simplified approach. In a real pipeline, you'd poll XRay until the scan is complete.
        # For demonstration, we'll try to fetch immediately.
        # Ensure you have a watch applied to your Docker repository in XRay for this to work.
        jf rt curl -XGET "/xray/api/v1/scan/graph/scanResults?path=${{ env.DOCKER_LOCAL_REPO }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}" -o xray_scan_data.json
      continue-on-error: true # Allow pipeline to continue even if scan data fetch fails initially

    - name: Upload XRay Scan Data as artifact
      # This will run if the previous step succeeded and it's a push event
      if: success() && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: xray-scan-data
        path: xray_scan_data.json
